引用访问一个变量是直接访问，而指针是间接访问。
引用是一个变量的别名，本身不单独分配自己的内存空间，而指针有自己的内存空间。
引用在开始的时候就绑定到了一个内存空间(开始必须赋初值),所以他只能是这个
内存空间的名字,而不能改成其他的,当然可以改变这个内存空间的值.
例如
int i = 3,j = 4;
int &x = i;//成为i的别名
x = j;//不能否认x仍然引用i,并没有成为j的别名,只是修改了x和j共享的内存空间的值.
这点与指针不同,指针在任何时刻都可以改变自己的指向

-------------------------------------------------------------------------

package main

import (
  "fmt"
	"net/http"
)

type MyMux struct{
}

func (p *MyMux) ServeHTTP(w http.ResponseWriter, r *http.Request){
	if r.URL.Path == "/"{
		sayhelloName(w,r)
		return
	}
	http.NotFound(w, r)
	return
}

func sayhelloName(w http.ResponseWriter, r *http.Request){
	fmt.Fprintf(w, "Hello myroute!")
}

func main(){
      mux := &MyMux{}// 解引用，MyMuX{}运算结果 内存空间 直接命名mux 
      //mux := new (MyMus)//mux 是一个指针, 存了一个内存地址，对应的内存空间 初始值为零， 可以"存储MyMux类型"的数据。
      //mux := MyMux{} //mux , 是MyUX{}的值的，复制一份得到的。

	http.ListenAndServe(":9999", mux)
}

