golang 中的 & 与*

&，好理解，翻译的也不错，就是“取地址”的意思。

* ， dereference , 解引用。
不注明 "它" 是来自哪个内存地址了，直接取用 "它" ！

比如 *P , 就是直接取用 指针P所指向的内存空间的值。

golang ,没有像C++ 里的引用符&，在golang里，它只是取址符。


-------------------------------------------------------------------------

package main

import (
  "fmt"
	"net/http"
)

type MyMux struct{
}

func (p *MyMux) ServeHTTP(w http.ResponseWriter, r *http.Request){
	if r.URL.Path == "/"{
		sayhelloName(w,r)
		return
	}
	http.NotFound(w, r)
	return
}

func sayhelloName(w http.ResponseWriter, r *http.Request){
	fmt.Fprintf(w, "Hello myroute!")
}

func main(){
      mux := &MyMux{}// 这里是取址，得到mux 的内存地址，赋给mux
      mux := new (MyMux)//mux 是一个指针。
      mux := MyMux{} //mux , 是MyUX{}的值的，复制一份得到的。

	http.ListenAndServe(":9999", mux)
}

