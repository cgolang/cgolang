m, ok := val.(json.Marshaler) //断言val,是否实现Marshaler接口，如果实现，赋给m, m的类型为 json.Marshaler

var _ json.Marshaler = (*MyMessage)(nil)//将空对象nil 类型转化为 *MyMessage，然后 赋给 _ ,成功则 _ 等于




----------------------------------------------

nil空对象

---------------------------------
Conversions:类型转换

*Point(p)        // same as *(Point(p))
(*Point)(p)      // p is converted to (*Point)
<-chan int(c)    // same as <-(chan int(c))
(<-chan int)(c)  // c is converted to (<-chan int)

uint(iota)               // iota value of type uint
float32(2.718281828)     // 2.718281828 of type float32
complex128(1)            // 1.0 + 0.0i of type complex128
string('x')              // "x" of type string
string(0x266c)           // "♬" of type string
MyString("foo" + "bar")  // "foobar" of type MyString
string([]byte{'a'})      // not a constant: []byte{'a'} is not a constant
(*int)(nil)              // not a constant: nil is not a constant, *int is not a boolean, numeric, or string type
int(1.2)                 // illegal: 1.2 cannot be represented as an int
string(65.0)             // illegal: 65.0 is not an integer constant
