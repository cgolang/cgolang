包sync实现了两种类型的锁： sync.Mutex （互拆锁） 和 sync.RWMutex。(读，写互拆锁)

应用场景： 多个请求同时 请求 同一个资源

以下例子：f(),与print(a),都要请求 变量 a ,同时请求！

  package main
  
  import (
  "fmt"
  "sync"
  )

  var l sync.Mutex
  var a string
  
  func f() {
          a = "hello, world";
  }
  
  func main() {

          go f();
          print(a);
  }

结果: print (a ) 打印出来的可能是空，也可能是 "hello, world"
如果要确保 打印的一定是  "hello, world" 怎么办呢？ 方法之一 ： 锁！（别一种方法是 Channel）
--------------------------------------------------------------------

package main

import (
  "fmt"
  "sync"
)

var l sync.Mutex
var a string

func f() {
        a = "hello, world";
        l.Unlock();
}

func main() {
       l.Lock();
        go f(); // 我被上锁了！我排在第一，我先执行！ 给  a 赋值“hello , world ” 完成之后， 解锁。

       l.Lock();
        fmt.Println(a);//我也被上锁了，我排在第二 -_-| ，我只能等第一个解锁了，我才可以执行
}
可以确保输出“hello, world”结果。因为，
第一次 l.Unlock() 调用（在f函数中）在第二次 l.Lock() 调用 （在main 函数中）返回之前发生，
也就是在 print 函数调用之前发生 , ( 调用 l.Unlock,了，说明 a = "hello, world",已经完成,这时候调用print(a),打印出来的一定是
“hello, world” 了)
